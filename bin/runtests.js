// Generated by CoffeeScript 1.3.3
(function() {
  var BJSON, bjson, bold, compare, data, data2, folder, format, fs, highlight, i, json, json2, mod, output, ratio, reset, result, test, tests, underline, _i, _len, _ref,
    __slice = [].slice;

  _ref = require("" + __dirname + "/../src/encoding.js"), global.TextDecoder = _ref.TextDecoder, global.TextEncoder = _ref.TextEncoder;

  BJSON = require("" + __dirname + "/../src/BJSON.coffee").BJSON;

  fs = require('fs');

  folder = "" + __dirname + "/../tests/";

  tests = fs.readdirSync(folder);

  tests.sort();

  compare = function(e1, e2) {
    var i, k, key, keys, v, _i, _j, _len, _ref1;
    if (e1 === e2) {
      return true;
    }
    if (e1 instanceof Array || e2 instanceof Array) {
      if (!(e1 instanceof Array && e2 instanceof Array)) {
        return false;
      }
      if (e1.length !== e2.length) {
        return false;
      }
      for (i = _i = 0, _ref1 = e1.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (!compare(e1[i], e2[i])) {
          return false;
        }
      }
      return true;
    }
    if (typeof e1 === 'object' || typeof e2 === 'object') {
      if (!(typeof e1 === 'object' && typeof e2 === 'object')) {
        return false;
      }
      keys = [
        (function() {
          var _results;
          _results = [];
          for (k in e1) {
            v = e1[k];
            _results.push(k);
          }
          return _results;
        })()
      ];
      if (!compare(keys, [
        (function() {
          var _results;
          _results = [];
          for (k in e2) {
            v = e2[k];
            _results.push(k);
          }
          return _results;
        })()
      ])) {
        return false;
      }
      for (_j = 0, _len = keys.length; _j < _len; _j++) {
        key = keys[_j];
        if (!compare(e1[key], e2[key])) {
          return false;
        }
      }
      return true;
    }
    return false;
  };

  format = function() {
    var args, i, len, length, padding, reminder, str;
    str = arguments[0], len = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    str = "" + str;
    length = Math.max(Math.abs(len) - str.length, 0);
    padding = ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
        _results.push(" ");
      }
      return _results;
    })()).join("");
    reminder = "";
    if (args.length !== 0) {
      reminder = format.apply(null, args);
    }
    if (len < 0) {
      return padding + str + reminder;
    }
    return str + padding + reminder;
  };

  reset = "\u001b[0m";

  bold = function(s) {
    return "\u001b[1m" + s + reset;
  };

  underline = function(s) {
    return "\u001b[4m" + s + reset;
  };

  highlight = function(s) {
    return "\u001b[47m" + s + reset;
  };

  console.log(underline(bold(format("Test:", 24, "size (JSON):", 15, "size (BJSON):", 15, "Compression:", 15, "Success:", 0))));

  for (i = _i = 0, _len = tests.length; _i < _len; i = ++_i) {
    test = tests[i];
    data = fs.readFileSync(folder + test);
    json = JSON.parse(data);
    bjson = BJSON.serialize(json);
    json2 = BJSON.parse(bjson);
    data2 = new Buffer(JSON.stringify(json2), 'utf8');
    result = compare(json, json2);
    mod = function(s) {
      return s;
    };
    if (!result) {
      mod = function(s) {
        return bold(s);
      };
    }
    ratio = Math.floor((1 - bjson.byteLength / data.length) * 100) + "%";
    output = format(test, 24, data2.length, -8, "", 7, bjson.byteLength, -8, "", 7, ratio, -8, "", 7) + mod(format(result, 8));
    if (i % 2 === 0) {
      output = highlight(output);
    }
    console.log(output);
  }

}).call(this);
